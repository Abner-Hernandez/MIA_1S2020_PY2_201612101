CREATE TABLE gender(
    gender_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    gender_name VARCHAR2(50) NOT NULL,
    PRIMARY KEY(gender_id)
);

CREATE TABLE type_client(
    class_client_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    name_type VARCHAR2(50) NOT NULL,
    credit_amount NUMBER NOT NULL,
    PRIMARY KEY(class_client_id)
);

CREATE TABLE type_usuario(
    type_usuario_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    name_type VARCHAR2(50) NOT NULL,
    PRIMARY KEY(type_usuario_id)
);

CREATE TABLE usuario(
    usuario_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    usuario_name VARCHAR2(50) NOT NULL,
    last_names VARCHAR2(100) NOT NULL,
    password_user VARCHAR2(50) NOT NULL,
    /*access_key VARCHAR2(50) NOT NULL,*/
    mail VARCHAR2(125) NOT NULL unique,
    cli_address VARCHAR2(150) NOT NULL,
    tel_number NUMBER NOT NULL,
    available_credit NUMBER NOT NULL,
    profit_made NUMBER NOT NULL,
    birth_date varchar2(30) NOT NULL,
    register_date varchar2(30) NOT NULL,
    class_client_id NUMBER NOT NULL,
    type_usuario_id NUMBER NOT NULL,
    gender_id NUMBER NOT NULL,
    estado NUMBER NOT NULL,
    PRIMARY KEY(usuario_id),
    FOREIGN KEY(class_client_id) REFERENCES type_client(class_client_id) ON DELETE CASCADE,
    FOREIGN KEY(type_usuario_id) REFERENCES type_usuario(type_usuario_id) ON DELETE CASCADE,
    FOREIGN KEY(gender_id) REFERENCES gender(gender_id) ON DELETE CASCADE
);

CREATE TABLE category(
    category_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    category_name VARCHAR2(75) NOT NULL UNIQUE,
    category_parent NUMBER,
    descripcion VARCHAR2(300),
    PRIMARY KEY(category_id),
    FOREIGN KEY(category_id) REFERENCES category(category_id) ON DELETE CASCADE
);

CREATE TABLE product(
    product_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    product_name VARCHAR2(100) NOT NULL UNIQUE,
    product_cod VARCHAR2(100) NOT NULL,
    price NUMBER NOT NULL,
    usuario_id NUMBER NOT NULL,
    available_number NUMBER NOT NULL,
    prod_description VARCHAR2(500) NOT NULL,
    register_date varchar2(30) NOT NULL,
    category_id NUMBER NOT NULL,
    url_img VARCHAR2(1000) NOT NULL,
    PRIMARY KEY(product_id),
    FOREIGN KEY(usuario_id) REFERENCES usuario(usuario_id) ON DELETE CASCADE,
    FOREIGN KEY(category_id) REFERENCES category(category_id) ON DELETE CASCADE
);

CREATE TABLE color(
    color_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    color_name VARCHAR2(50) NOT NULL UNIQUE,
    PRIMARY KEY(color_id)
);

CREATE TABLE producto_color(
    color_id NUMBER NOT NULL,
    product_id NUMBER NOT NULL,
    FOREIGN KEY(product_id) REFERENCES product(product_id) ON DELETE CASCADE,
    FOREIGN KEY(color_id) REFERENCES color(color_id) ON DELETE CASCADE
);

CREATE TABLE feedback_product(
    title VARCHAR2(50) NOT NULL,
    feedback VARCHAR2(400) NOT NULL,
    feedback_date varchar2(30) NOT NULL,
    ponderation NUMBER NOT NULL,
    usuario_id NUMBER NOT NULL,
    product_id NUMBER NOT NULL,
    FOREIGN KEY(usuario_id) REFERENCES usuario(usuario_id) ON DELETE CASCADE,
    FOREIGN KEY(product_id) REFERENCES product(product_id) ON DELETE CASCADE
);

CREATE TABLE shoping_cart(
    usuario_id NUMBER NOT NULL,
    sh_cart_total NUMBER NOT NULL,
    PRIMARY KEY(usuario_id),
    FOREIGN KEY(usuario_id) REFERENCES usuario(usuario_id) ON DELETE CASCADE
);

CREATE TABLE cart_product(
    usuario_id NUMBER NOT NULL,
    product_id NUMBER NOT NULL UNIQUE,
    number_product NUMBER NOT NULL,
    FOREIGN KEY(usuario_id) REFERENCES shoping_cart(usuario_id) ON DELETE CASCADE,
    FOREIGN KEY(product_id) REFERENCES product(product_id) ON DELETE CASCADE
);

CREATE TABLE credit_type(
    credit_type_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    credit_name VARCHAR2(50) NOT NULL UNIQUE,
    credit_amount NUMBER NOT NULL,
    PRIMARY KEY(credit_type_id)
);

CREATE TABLE invoice(
    invoice_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    usuario_id NUMBER NOT NULL,
    invoice_total NUMBER NOT NULL,
    invoice_date varchar2(30) NOT NULL,
    PRIMARY KEY(invoice_id),
    FOREIGN KEY(usuario_id) REFERENCES usuario(usuario_id) ON DELETE CASCADE
);

CREATE TABLE detail_invoice(
    invoice_id NUMBER NOT NULL,
    product_id NUMBER NOT NULL,
    number_product NUMBER NOT NULL,
    FOREIGN KEY(invoice_id) REFERENCES invoice(invoice_id),
    FOREIGN KEY(product_id) REFERENCES product(product_id)
);

CREATE TABLE page_data(
    id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    page_name VARCHAR2(100) NOT NULL,
    page_slogan VARCHAR2(125) NOT NULL,
    page_logo VARCHAR2(300) NOT NULL,
    page_video VARCHAR2(300) NOT NULL,
    page_mission VARCHAR2(400) NOT NULL,
    page_vision VARCHAR2(400) NOT NULL,
    page_about VARCHAR2(400) NOT NULL,
    PRIMARY KEY(id)
);

CREATE TABLE bitacora(
    id_bitacora NUMBER NOT NULL,
    usuario_id NUMBER NOT NULL,
    accion varchar2(100),
    fecha varchar2(50),
    FOREIGN KEY(usuario_id) REFERENCES usuario(usuario_id) ON DELETE CASCADE
);

/* example to insert  */
/* genero */
INSERT INTO gender(gender_name) 
VALUES('Femenino');

INSERT INTO gender(gender_name) 
VALUES('Masculino');


/* type_client */
INSERT INTO type_usuario(name_type) 
VALUES('Administrador');

INSERT INTO type_usuario(name_type) 
VALUES('Server');

INSERT INTO type_usuario(name_type) 
VALUES('Client');

 /* type_client */
INSERT INTO type_client(name_type, credit_amount) 
VALUES('Diamante', 50000);

INSERT INTO type_client(name_type, credit_amount) 
VALUES('Platino', 25000);

INSERT INTO type_client(name_type, credit_amount) 
VALUES('Oro', 10000);

INSERT INTO type_client(name_type, credit_amount) 
VALUES('Plata', 5000);

INSERT INTO type_client(name_type, credit_amount) 
VALUES('Bronce', 1000);

/* usuarioe */
INSERT INTO usuario( usuario_name, last_names, password_user, mail, cli_address, tel_number, available_credit, profit_made, birth_date, register_date, class_client_id, type_usuario_id, gender_id, estado) 
VALUES('Abner', 'Hernandez', 'admin', 'admin@outlook.com', 'Guatemala', 50336895, 10000, 500, '14/11/1997', (SELECT TO_CHAR (SYSDATE, 'DD/MM/YYYY') "NOW" FROM DUAL), 1, 1, 1, 1);
 
 /* category */
INSERT INTO category(category_name) 
VALUES('Ropa');

INSERT INTO category(category_name, category_parent) 
VALUES('Dama', 1);

 /* product */
INSERT INTO product(product_name, product_cod, price, usuario_id, available_number, prod_description, register_date, category_id, url_img) 
VALUES('MSI Laptop', 'a258', 100, 1, 50,'es nuevo modelo', (SELECT TO_CHAR (SYSDATE, 'DD/MM/YYYY') "NOW" FROM DUAL), 1, 'http');

 /* color */
INSERT INTO color(color_name) 
VALUES('Rojo');

 /* feedback_product */
INSERT INTO feedback_product(title, feedback, feedback_date, ponderation, usuario_id, product_id) 
VALUES('titulo1', 'producto muy buena calida', (SELECT TO_CHAR (SYSDATE, 'DD/MM/YYYY') "NOW" FROM DUAL), 95, 1, 1);

 /* shoping_cart */
INSERT INTO shoping_cart(usuario_id, sh_cart_total) 
VALUES(1, 500);

 /* cart_product */
INSERT INTO cart_product(usuario_id, product_id, number_product) 
VALUES(1, 1, 20);


 /* invoice */
INSERT INTO invoice(usuario_id, invoice_total, invoice_date) 
VALUES(1, 1000, (SELECT TO_CHAR (SYSDATE, 'DD/MM/YYYY') "NOW" FROM DUAL));

 /* detail_invoice */
INSERT INTO detail_invoice(invoice_id, product_id, number_product) 
VALUES(1, 1, 54);

/* disable id remplacement */
SET DEFINE OFF;

/* page_data */
INSERT INTO page_data(page_name, page_slogan, page_logo, page_video, page_mission, page_vision, page_about) 
VALUES('Alie Sell', 'Si lo tienes lo puedes vender', 'http://drive.google.com/uc?export=view&id=1VOF2vEApHl8_jHlieN46fCqB1LY2FVfj', 'https://www.youtube.com/watch?v=RIQQLzVgU5A&t=6s', 'Example', 'Example', 'this is Alie Sell');

/* delete all tables */
DROP TABLE "PAGE_DATA" CASCADE CONSTRAINTS;
DROP TABLE "GENDER" CASCADE CONSTRAINTS;
DROP TABLE "TYPE_CLIENT" CASCADE CONSTRAINTS;
DROP TABLE "TYPE_USUARIO" CASCADE CONSTRAINTS;
DROP TABLE "USUARIO" CASCADE CONSTRAINTS;
DROP TABLE "CATEGORY" CASCADE CONSTRAINTS;
DROP TABLE "PRODUCT" CASCADE CONSTRAINTS;
DROP TABLE "COLOR" CASCADE CONSTRAINTS;
DROP TABLE "PRODUCTO_COLOR" CASCADE CONSTRAINTS;
DROP TABLE "FEEDBACK_PRODUCT" CASCADE CONSTRAINTS;
DROP TABLE "SHOPING_CART" CASCADE CONSTRAINTS;
DROP TABLE "CART_PRODUCT" CASCADE CONSTRAINTS;
DROP TABLE "CREDIT_TYPE" CASCADE CONSTRAINTS;
DROP TABLE "INVOICE" CASCADE CONSTRAINTS;
DROP TABLE "DETAIL_INVOICE" CASCADE CONSTRAINTS;
DROP TABLE "BITACORA" CASCADE CONSTRAINTS;

/* restar fechas */
select
    (to_date('2020-08-06', 'YYYY-MM-DD') - to_date('2012-02-28', 'YYYY-MM-DD')) as diff_hours
from dual;

select
    (to_date(to_char(sysdate, 'YYYY-MM-DD'), 'YYYY-MM-DD') - to_date('2012-02-28', 'YYYY-MM-DD')) as diff_hours
from dual;

/* Obtener fecha del ordenador */
SELECT TO_CHAR (SYSDATE, 'DD-MM-YYYY') "NOW" FROM DUAL;

/* create stored procedures */

create or replace procedure insertar_usuario(nomb varchar2, apell varchar2, corre varchar2, tel integer, foto varchar2, gen integer, feNa varchar2, dire varchar2, userN varchar2, tipo integer) is
pass varchar2(50) := '';
idd integer;
idu integer;
idp integer;
begin
  savepoint ing;
  pass := generarPassword();  
  select seq_disco.nextval into idd from dual;
  select seq_usuario.nextval into idu from dual;
  select seq_particion.nextval into idp from dual;
  
    insert into usuario(no_identificador,nombre,apellido,username,password,correo,telefono,fotografia,id_genero,fecha_nacimiento,fecha_registro,direccion,id_tipo_usuario,estado) values(idu,nomb,apell,userN,pass,corre,tel,foto,2,feNA,(SELECT TO_CHAR(sysdate,'DD/MM/YYYY HH24:MI:SS') from dual),dire,3,0);
    
    insert into disco(id_disco,d_size,nombre) values(idd,1000,'Mi Disco');
    insert into particion(id_particion,nombre_particion,p_size,id_disco) values(idp,'Mi Particion',1000,idd);
    
    insert into usuarioparticion(id_usuario,id_particion) values(idu,idp);
    insert into estructura(id_estructura, id_propietario, nombre,contenido,c_padre,id_tipo,id_particion,permiso) values(seq_carpeta.nextval,idu,'/','',NULL,1,idp,'664');
    correo_verificacion(corre,'Verificacion de Cuenta', userN, pass);
    dbms_scheduler.create_job 
    (  
      job_name      =>  'sd'||idu,  
      job_type      =>  'PLSQL_BLOCK',  
      job_action    =>  'begin cancelarcuenta('||idu||'); end;',  
      start_date    =>  sysdate+1/1440,  
      enabled       =>  TRUE,  
      auto_drop     =>  TRUE,  
      comments      =>  'one-time job');
 commit;
end insertar_usuario;

/* enviar correo verificacion*/
grant execute on utl_http to public
create or replace procedure correo_verificacion(
    destino varchar2, 
    asunto varchar2, 
    username varchar)
is
    req utl_http.req;
    res utl_http.resp;
    logo varchar(300);
    api varchar2(4000) := 'http://localhost:3000/api/correo/email';
    name varchar2(4000);
    buffer varchar2(4000); 
    objeto varchar2(4000); 
    
begin
    SELECT pg.page_logo INTO logo FROM page_data pg WHERE ROWNUM = 1;
    objeto := '{"asunto": "'||asunto||'", "destino":"'||destino||'", "username": "'||username||'", "page_logo": "'||logo||'"}';

    req := utl_http.begin_request(api, 'POST',' HTTP/1.1');
    utl_http.set_header(req, 'user-agent', 'mozilla/4.0'); 
    utl_http.set_header(req, 'content-type', 'application/json'); 
    utl_http.set_header(req, 'Content-Length', length(objeto));
    
    utl_http.write_text(req, objeto);
    res := utl_http.get_response(req);
begin
    loop
      utl_http.read_line(res, buffer);
      dbms_output.put_line(buffer);
    end loop;
    utl_http.end_response(res);
    exception
    when utl_http.end_of_body 
    then
      utl_http.end_response(res);
  end;
end correo_verificacion;

/* insertar_usuario */
CREATE OR REPLACE PROCEDURE insertar_usuario (  
    nombre usuario.usuario_name%TYPE,  
    apellido usuario.last_names%TYPE,  
    password_u usuario.password_user%TYPE,  
    /*clave_acceso usuario.access_key%TYPE, */  
    correo usuario.mail%TYPE,  
    direccion usuario.cli_address%TYPE,  
    telefono usuario.tel_number%TYPE,  
    credito_disponible usuario.available_credit%TYPE,  
    /*ganancias usuario.profit_made%TYPE,  */
    fecha_nacimiento usuario.birth_date%TYPE,  
    id_class_client usuario.class_client_id%TYPE,  
    id_tipe_usuario usuario.type_usuario_id%TYPE, 
    id_genero usuario.gender_id%TYPE)    
IS
    id_user INTEGER;
BEGIN
    INSERT INTO usuario(usuario_name, last_names, password_user, mail, cli_address, tel_number, available_credit, profit_made, birth_date, register_date, class_client_id, type_usuario_id, gender_id, estado) 
    VALUES(nombre, apellido, password_u, correo, direccion, telefono, credito_disponible, 0, fecha_nacimiento, (SELECT TO_CHAR (SYSDATE, 'DD/MM/YYYY') "NOW" FROM DUAL), id_class_client, id_tipe_usuario, id_genero, 0);

    SELECT u.usuario_id into id_user from usuario u where u.mail = correo;
    
    INSERT INTO shoping_cart(usuario_id, sh_cart_total)
    VALUES (id_user, 0);
    
COMMIT;  
END;  


/*no funciono hacer solicitudes http en oracle 18c*/
/* insertar_usuario */
CREATE OR REPLACE PROCEDURE insertar_usuario (  
    nombre usuario.usuario_name%TYPE,  
    apellido usuario.last_names%TYPE,  
    password_u usuario.password_user%TYPE,  
    /*clave_acceso usuario.access_key%TYPE, */  
    correo usuario.mail%TYPE,  
    direccion usuario.cli_address%TYPE,  
    telefono usuario.tel_number%TYPE,  
    credito_disponible usuario.available_credit%TYPE,  
    /*ganancias usuario.profit_made%TYPE,  */
    fecha_nacimiento usuario.birth_date%TYPE,  
    id_class_client usuario.class_client_id%TYPE,  
    id_tipe_usuario usuario.type_usuario_id%TYPE, 
    id_genero usuario.gender_id%TYPE)    
IS
idu integer;
BEGIN
    INSERT INTO usuario(usuario_name, last_names, password_user, mail, cli_address, tel_number, available_credit, profit_made, birth_date, register_date, class_client_id, type_usuario_id, gender_id, estado) 
    VALUES(nombre, apellido, password_u, correo, direccion, telefono, credito_disponible, 0, fecha_nacimiento, (SELECT TO_CHAR (SYSDATE, 'DD/MM/YYYY') "NOW" FROM DUAL), id_class_client, id_tipe_usuario, id_genero, 0);
    select u.usuario_id into idu from usuario u WHERE u.mail = correo;
    dbms_scheduler.create_job 
    (  
      job_name      =>  'sd'||idu,  
      job_type      =>  'PLSQL_BLOCK',  
      job_action    =>  'begin cancelarcuenta('||idu||'); end;',  
      start_date    =>  sysdate+1/1440,  
      enabled       =>  TRUE,  
      auto_drop     =>  TRUE,  
      comments      =>  'one-time job');
COMMIT;  
END;  

/* cancelar cuenta */
create or replace procedure cancelarcuenta(iduse integer)
is
est integer;
begin
  select estado  into est from usuario where usuario_id = iduse;
  if(est = 0)
  then update usuario set estado = 2 where usuario_id = iduse;
  end if;
end;

/* generar password */ 
create or replace function generarPassword
return varchar2
is
ma char;
mi char;
num1 char;
num2 char;
num3 char;
ca char;
op integer;
pass varchar(50);
begin
  op := dbms_random.value(0,4);
  ma := dbms_random.string('U',1);
  mi := dbms_random.string('L',1);
  num1 := chr(dbms_random.value(48,57));
  num2 := chr(dbms_random.value(48,57));
  num3 := chr(dbms_random.value(35,47));
  ca := chr(dbms_random.value(35,47));
   case (op) 
   when 0 then
    pass := dbms_random.string('A',3)||ma||num1||num2||dbms_random.string('A',3)||mi||ca||dbms_random.string('A',3);
   
  when 1 then
    pass := ca||num1||dbms_random.string('A',3)||mi||num2||ma||dbms_random.string('A',3)||num3;
  
  when 2 then
    pass := num1||dbms_random.string('A',3)||ca||mi||num2||num3||ma||dbms_random.string('A',3);
  
  when 3 then
    pass := ma||dbms_random.string('A',3)||dbms_random.string('A',3)||num2||mi||dbms_random.string('A',3)||ca||num1;
    
  when 4 then
    pass := dbms_random.string('A',3)||mi||dbms_random.string('A',3)||ca||num1||num2||ma;
  end case;
  return (pass);
end generarPassword;

/* Recovery Password*/
create or replace procedure rollback_acount(id_user integer, pass varchar2)
is
begin
    update usuario set password_user = pass where usuario_id = id_user;
COMMIT;
end;

CREATE OR REPLACE PROCEDURE recovery_password (  
    id_user integer)    
IS
pass varchar2(50) := '';
last_pass varchar2(50) := '';
BEGIN
    savepoint passUser;
    pass := generarPassword();
    select u.password_user into last_pass from usuario u where u.usuario_id = id_user;
    DBMS_OUTPUT.PUT_LINE('begin rollback_acount('||id_user||', '''||last_pass||'''); end;'); 
    dbms_scheduler.create_job 
    (  
      job_name      =>  'usrpass'||id_user,  
      job_type      =>  'PLSQL_BLOCK',
      job_action    =>  'begin rollback_acount('||id_user||', '''||last_pass||'''); end;',  
      start_date    =>  sysdate+1/1440,  
      enabled       =>  TRUE,  
      auto_drop     =>  TRUE,  
      comments      =>  'one-time job');
      update usuario set password_user = pass where usuario_id = id_user;
COMMIT;  
END;  

/* product insert */
CREATE OR REPLACE PROCEDURE insertar_producto (  
    nombre product.product_name%TYPE,  
    codigo product.product_cod%TYPE,  
    precio product.price%TYPE,  
    usuario product.usuario_id%TYPE,  
    disponibles product.available_number%TYPE,  
    descripcion product.prod_description%TYPE,  
    categoria product.category_id%TYPE,
    url_imgen product.url_img%TYPE)
IS
BEGIN
    INSERT INTO product(product_name, product_cod, price, usuario_id, available_number, prod_description, register_date, category_id, url_img) 
    VALUES(nombre, codigo, precio, usuario, disponibles, descripcion, (SELECT TO_CHAR (SYSDATE, 'DD/MM/YYYY') "NOW" FROM DUAL), categoria, url_imgen);
COMMIT;  
END;  

/* product insert shoping cart*/
/*
CREATE OR REPLACE PROCEDURE insertar_producto_carrito (  
    id_user integer,  
    id_producto integer,  
    cantidad integer, 
    precio integer)    
IS
BEGIN
    INSERT INTO cart_product(usuario_id, product_id, number_product) 
    VALUES(id_user, id_producto, cantidad);
    
    UPDATE product set available_number = available_number - cantidad where product_id = id_producto;
    UPDATE shoping_cart set sh_cart_total = sh_cart_total + precio WHERE usuario_id = id_user;
COMMIT;  
END;  
*/

--Create categorys
CREATE OR REPLACE PROCEDURE insertar_categoria (  
    padre category.category_name%TYPE,   
    hija category.category_name%TYPE,
    descrip category.descripcion%TYPE)    
IS
existehija integer := 0;
existepadre integer := 0;
existeambos integer := 0;
BEGIN
    
    begin
    select c.category_id into existepadre from category c where c.category_name = padre;
    exception when no_data_found then existepadre := 0;
    end;
    
    --DBMS_OUTPUT.put_line(existepadre); 
    if(existepadre = 0)
    then
        if(descrip is null)
        then
            INSERT INTO category(category_name) 
            VALUES(padre);
        ELSE
            INSERT INTO category(category_name, descripcion) 
            VALUES(padre, descrip);
        end if;
        select c.category_id into existepadre from category c where c.category_name = padre;
    end if;

    --DBMS_OUTPUT.put_line(hija);
    if (hija IS NOT NULL) 
    then
        --DBMS_OUTPUT.put_line('ingreso');
        /* buscar id categoria padre */
        begin
        select c.category_id into existehija from category c where c.category_name = hija;
        exception when no_data_found then existehija := 0;
        end;
        
        --DBMS_OUTPUT.put_line(existehija);
        if(existehija = 0)
        then
            if(descrip is null)
            then
                INSERT INTO category(category_name, category_parent) 
                VALUES(hija, existepadre);
            ELSE
                INSERT INTO category(category_name, category_parent, descripcion) 
                VALUES(hija, existepadre, descrip);
            end if;


            select c.category_id into existehija from category c where c.category_name = hija;
        end if;

        begin
        select c.category_id into existeambos from category c where c.category_name = hija and c.category_parent = existepadre;
        exception when no_data_found then existeambos := 0;
        end;
        
        if(existeambos = 0)
        THEN
            update category set category_parent = existepadre where category_id = existehija;
        end if;
        --DBMS_OUTPUT.put_line('no entro al if');
    end if;
COMMIT;  
END;  

--examples to categorys 
Begin insertar_categoria('Juguetes', 'niña'); end;
Begin insertar_categoria('Max', 'Motores'); end;

--obtener categorias con el nombre de su padre
SELECT
  c.*,
  CASE 
    WHEN c.category_parent is not null
        THEN (select sb.category_name from category sb where sb.category_id = c.category_parent) 
    ELSE 
        null
  END as parent
FROM
  category c;


/* carga masiva */
--create tables aux
create table masive_charge(
    nombre VARCHAR2(100) NOT NULL,
    codigo VARCHAR2(100) NOT NULL,
    url VARCHAR2(1000) NOT NULL,
    descripcion VARCHAR2(1000) NOT NULL,
    categoria VARCHAR2(1000) NOT NULL,
    precio VARCHAR2(100) NOT NULL,
    cantidad VARCHAR2(100) NOT NULL,
    color VARCHAR2(1000) NOT NULL
);


/*Carrito de compras*/
CREATE OR REPLACE PROCEDURE insertar_producto_carrito (  
    id_user integer,  
    id_producto integer,  
    cantidad integer, 
    precio integer)    
IS
    credito_d integer := 0;
    total_carrito integer := 0;
BEGIN

    begin
        select u.available_credit into credito_d from usuario u where u.usuario_id = id_user;
        exception when no_data_found then credito_d := 0;
    end;
        
    begin
        select sp.sh_cart_total into total_carrito from shoping_cart sp where sp.usuario_id = id_user;
        exception when no_data_found then total_carrito := 0;
    end;
        DBMS_OUTPUT.put_line (total_carrito);
        total_carrito := total_carrito + precio * cantidad;
        DBMS_OUTPUT.put_line (total_carrito);
        DBMS_OUTPUT.put_line (credito_d);

    if(credito_d > total_carrito )
    then
        INSERT INTO cart_product(usuario_id, product_id, number_product) 
        VALUES(id_user, id_producto, cantidad);
        
        UPDATE product set available_number = available_number - cantidad where product_id = id_producto;
        UPDATE shoping_cart set sh_cart_total = sh_cart_total + precio*cantidad WHERE usuario_id = id_user;
    end if;
COMMIT;  
END;  


CREATE OR REPLACE PROCEDURE eliminar_producto_carrito (  
    id_user integer,  
    id_producto integer,  
    cantidad integer, 
    precio integer)    
IS
BEGIN
    delete from cart_product where usuario_id = id_user and product_id = id_producto;
    
    UPDATE product set available_number = available_number + cantidad where product_id = id_producto;
    UPDATE shoping_cart set sh_cart_total = sh_cart_total - precio*cantidad WHERE usuario_id = id_user;
COMMIT;  
END;


CREATE OR REPLACE PROCEDURE insertar_factura (id_user integer)    
IS
BEGIN
    INSERT INTO invoice(usuario_id, invoice_total, invoice_date) 
    VALUES(id_user, 0, (SELECT TO_CHAR (SYSDATE, 'DD/MM/YYYY') "NOW" FROM DUAL));
COMMIT;  
END;

/*Facturacion*/
CREATE OR REPLACE PROCEDURE insertar_producto_factura (  
    id_user integer,  
    id_producto integer,  
    cantidad integer, 
    precio integer)    
IS
    id_inv integer := 0;
    id_vendor integer := 0;
BEGIN

    select i.invoice_id into id_inv from invoice i where i.usuario_id = id_user AND ROWNUM < 2 ORDER BY invoice_id desc;
    select p.usuario_id into id_vendor from product p where p.product_id = id_producto;

    INSERT INTO detail_invoice(invoice_id, product_id, number_product) 
    VALUES(id_inv, id_producto, cantidad);
    
    update invoice set invoice_total = invoice_total + precio*cantidad WHERE invoice_id = id_inv;
    update usuario set profit_made = profit_made + id_producto where usuario_id = id_vendor;
    update usuario set available_credit = available_credit - precio*cantidad where usuario_id = id_user;
    
    delete from cart_product where usuario_id = id_user and product_id = id_producto;
    UPDATE product set available_number = available_number + cantidad where product_id = id_producto;
    UPDATE shoping_cart set sh_cart_total = sh_cart_total - precio*cantidad WHERE usuario_id = id_user;
    
COMMIT;  
END;  

/*Reportes*/
/*El listado de todos los Servicio de ayuda de sexo masculino que hayan nacido arriba de ​ X ​ año.*/
select u.* from usuario u, type_usuario tu, gender g where to_date('01/01/'||anio ,'DD/MM/YY') < to_date(u.birth_date,'DD/MM/YY') and u.type_usuario_id = tu.type_usuario_id and lower(tu.name_type) = 'server' and g.gender_id= u.gender_id and lower(g.gender_name) = 'masculino';

/*El listado de todos los administradores de sexo femenino que hayan nacido debajo de Y ​año*/ 
select u.* from usuario u, type_usuario tu, gender g where to_date('01/01/'||anio ,'DD/MM/YY') > to_date(u.birth_date,'DD/MM/YY') and u.type_usuario_id = tu.type_usuario_id and lower(tu.name_type) = 'administrador' and g.gender_id= u.gender_id and lower(g.gender_name) = 'femenino';

/*Los clientes que más ganancias han generado ordenandos de mayor a menor.*/
select u.* from usuario u, type_usuario tu where u.type_usuario_id = tu.type_usuario_id and lower(tu.name_type) = 'client'  ORDER BY u.profit_made desc;

/* • Top 3 de productos más vendidos. */
select * from (select p.product_name, SUM(di.number_product)VENTAS from product p, detail_invoice di where p.product_id = di.product_id GROUP BY p.product_name ORDER BY SUM(di.number_product) desc) where ROWNUM < 4;

/*Top 3 de clientes que más productos tenga en su catálogo.*/
select * from (SELECT u.usuario_name, COUNT(*)PRODUCTOS from usuario u INNER JOIN product p ON p.usuario_id = u.usuario_id GROUP BY u.usuario_name ORDER BY COUNT(*) desc) where ROWNUM < 4;

/*Todos los productos que tengan ​ X ​ cantidad disponible*/
select p.* from product p where p.available_number = disponibles;
